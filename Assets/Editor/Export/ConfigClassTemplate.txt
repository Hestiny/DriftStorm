public class [CONFIGNAME]
{
	static List<Dictionary<[FIRSTFIELDTYPE], [CONFIGNAME_CONVERT]Class>> checkList = new List<Dictionary<[FIRSTFIELDTYPE], [CONFIGNAME_CONVERT]Class>>()
	{
		[ADDLIST]
	};


    static Dictionary<[FIRSTFIELDTYPE], [CONFIGNAME_CONVERT]Class> mdata;
    public static Dictionary<[FIRSTFIELDTYPE], [CONFIGNAME_CONVERT]Class> data
    {
        get
        {
            if (null == mdata)
            {
                mdata = new Dictionary<[FIRSTFIELDTYPE], [CONFIGNAME_CONVERT]Class>();
                int count = checkList.Count;
                for (int i = 0; i < count; i++)
                {
                    foreach (var item in checkList[i])
                        mdata.Add(item.Key, item.Value);
                }

                for (int i = count - 1; i >= 0; i--)
                    checkList[i].Clear();

                checkList.Clear();
            }
            return mdata;
        }
    }

    public static bool Check([FIRSTFIELDTYPE] key)
    {
        if (null != mdata)
            return mdata.ContainsKey(key);
        else
        {
            foreach (var item in checkList)
            {
                if (item.ContainsKey(key))
                    return true;
            }
        }

        return false;
    }

    public static bool CheckAndGet([FIRSTFIELDTYPE] key, out [CONFIGNAME_CONVERT]Class config)
    {
        config = null;

        if (null != mdata)
            return mdata.TryGetValue(key, out config);
        else
        {
            foreach (var item in checkList)
            {
                if (item.ContainsKey(key))
                {
                    config = item[key];
                    return true;
                }
            }
        }
        return false;
    }

    public static [CONFIGNAME_CONVERT]Class Get([FIRSTFIELDTYPE] key)
    {
        if (null != mdata)
        {
            if (mdata.ContainsKey(key))
                return mdata[key];
        }
        else
        {
            foreach (var item in checkList)
            {
                if (item.ContainsKey(key))
                    return item[key];
            }
        }

        return null;
    }
}